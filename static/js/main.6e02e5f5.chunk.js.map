{"version":3,"sources":["packages/main/Main.js","packages/service/worker.js","packages/render/Render.js","packages/images/logo.svg"],"names":["Main","state","data","error","loading","x","y","onChangeX","value","target","onChange","Number","onChangeY","prop","setState","onReset","handleStop","e","this","className","type","onClick","handle","position","grid","scale","onStop","draggable","alt","src","logo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"0RAcqBA,G,kNAEjBC,MAAQ,CACJC,MAAoB,EACpBC,OAAoB,EACpBC,SAAoB,EACpBC,EAAoB,EACpBC,EAAoB,G,EAGxBC,UAAY,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MACrB,EAAKE,SAAS,IAAKC,OAAOH,K,EAG9BI,UAAY,YAA4B,IAAfJ,EAAc,EAAxBC,OAAUD,MACrB,EAAKE,SAAS,IAAKC,OAAOH,K,EAG9BE,SAAW,SAACG,EAAML,GACd,EAAKM,SAAL,eAAiBD,EAAOL,K,EAG5BO,QAAU,WACN,EAAKD,SAAS,CAAET,EAAG,EAAGC,EAAG,K,EAG7BU,WAAa,SAACC,EAAD,GAA2B,IAArBZ,EAAoB,EAApBA,EAAGC,EAAiB,EAAjBA,EAAiB,yBACnC,EAAKQ,SAAS,CAAET,IAAGC,O,wEAGb,IAAD,EAQDY,KAAKjB,MAFLI,EANC,EAMDA,EACAC,EAPC,EAODA,EAGJ,OACI,yBAAKa,UAAU,QAqBX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eACX,2CACA,6BACI,6BAAK,sCAAL,IAAwB,2BAAOC,KAAK,SAASV,SAAUQ,KAAKX,UAAWC,MAAOH,KAC9E,6BAAK,sCAAL,IAAwB,2BAAOe,KAAK,SAASV,SAAUQ,KAAKN,UAAWJ,MAAOF,MAElF,4BAAQe,QAASH,KAAKH,SAAtB,UAEJ,yBAAKI,UAAU,iBACX,kBAAC,IAAD,CACIG,OAAO,UACPC,SAAU,CAAElB,IAAGC,KACfkB,KAAM,CAAC,GAAI,IACXC,MAAO,EACPC,OAAQR,KAAKF,YACb,6BACI,yBAAKW,WAAW,EAAOR,UAAU,cAAcS,IAAI,OAAOC,IAAKC,e,GA/E7DC,IAAMC,YCFpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZeC,IAASC,OAC1B,kBAAC,EAAD,MACAC,SAASC,eAAe,QD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBErInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.6e02e5f5.chunk.js","sourcesContent":["\nimport React            from 'react'\n\nimport Draggable        from 'react-draggable';\nimport logo             from '../images/logo.svg';\n// import config           from '../config'\n// import Error            from '../error/Error'\n// import fetchFormApi     from '../api/fetch'\n// import Loader           from '../loader/Loader'\n// import Map              from '../map/Map'\n\nimport './Main.scss'\n\n\nexport default class Main extends React.Component {\n\n    state = {\n        data:               false,\n        error:              false,\n        loading:            false,\n        x:                  0,\n        y:                  0,\n    }\n\n    onChangeX = ({ target: { value } }) => {\n        this.onChange('x', Number(value))\n    }\n\n    onChangeY = ({ target: { value } }) => {\n        this.onChange('y', Number(value))\n    }\n\n    onChange = (prop, value) => {\n        this.setState({ [prop]: value })\n    }\n\n    onReset = () => {\n        this.setState({ x: 0, y: 0 })\n    }\n\n    handleStop = (e, { x, y, ...rest }) => {\n        this.setState({ x, y })\n    }\n\n    render() {\n\n        const {\n            // data,\n            // error: { message },\n            // loading,\n            x, \n            y,\n        } = this.state\n\n        return (\n            <div className=\"main\">\n                {/* { loading && \n                    <Loader \n                        height={360} \n                        width={360} \n                        timeout={0} \n                    />\n                }\n\n                { message && \n                    <Error \n                        message={message}\n                    />\n                }\n\n                { data && \n                    <Map \n                        data={data} \n                    />\n                } */}\n\n                <div className=\"main\">\n                    <div className=\"coordinates\">\n                        <h1>Coordinates</h1>\n                        <div>\n                            <div><label>x: </label> <input type=\"number\" onChange={this.onChangeX} value={x} /></div>\n                            <div><label>y: </label> <input type=\"number\" onChange={this.onChangeY} value={y} /></div>\n                        </div>\n                        <button onClick={this.onReset}>Reset</button>\n                    </div>\n                    <div className=\"img-container\">\n                        <Draggable\n                            handle=\".handle\"\n                            position={{ x, y }}\n                            grid={[25, 25]}\n                            scale={1}\n                            onStop={this.handleStop}>\n                            <div>\n                                <img draggable={false} className=\"handle logo\" alt=\"logo\" src={logo} />\n                            </div>\n                        </Draggable>\n                    </div>\n                </div>  \n\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React        from 'react';\nimport ReactDOM     from 'react-dom';\n\nimport Main         from '../main/Main';\n\n\nexport default () => ReactDOM.render(\n    <Main />, \n    document.getElementById('app')\n)","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}